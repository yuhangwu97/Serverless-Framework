_format_version: "3.0"
_transform: true

services:
  # Node.js Middleware Service (中台) - 处理认证和聚合
  - name: middleware-service
    url: http://middleware-service:3001
    plugins:
      - name: cors
        config:
          origins:
            - http://localhost:3000
            - http://web-client:3000
          methods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          headers:
            - Accept
            - Accept-Version
            - Content-Length
            - Content-MD5
            - Content-Type
            - Date
            - Authorization
            - X-User-ID
            - X-User-Role
            - X-User-Name
            - X-User-Email
          credentials: true
          max_age: 3600

  # Golang Business Service (后台) - gRPC 服务
  - name: business-service-grpc
    protocol: grpc
    host: business-service
    port: 9090

  # Golang Business Service - HTTP 代理 (通过 gRPC Gateway)
  - name: business-service-http
    protocol: grpc
    host: business-service
    port: 9090
    plugins:
      - name: grpc-gateway
        config:
          proto: /etc/kong/protos/business.proto
      - name: cors
        config:
          origins:
            - http://localhost:3000
            - http://web-client:3000
          credentials: true

  # Python Analytics Service (辅助后台)
  - name: analytics-service
    url: http://analytics-service:8001
    plugins:
      - name: cors
        config:
          origins:
            - http://localhost:3000
            - http://web-client:3000
          credentials: true

routes:
  # ================================
  # UI Routes - 通过中台处理，使用 Cookie 认证
  # ================================
  
  # 校园认证路由
  - name: campus-auth-ui
    service: middleware-service
    paths:
      - /ui/campus-auth
    strip_path: false
    plugins:
      - name: session
        config:
          storage: cookie
          secret: your-session-secret-key
          cookie_name: campus_session
          cookie_secure: false
          cookie_httponly: true
          cookie_samesite: Lax

  # UI 业务路由 - 通过中台聚合
  - name: ui-business-routes
    service: middleware-service
    paths:
      - /ui/user
      - /ui/business
      - /ui/analytics
      - /ui/graph
    strip_path: false
    plugins:
      - name: session
        config:
          storage: cookie
          secret: your-session-secret-key
          cookie_name: campus_session
      - name: request-transformer
        config:
          add:
            headers:
              - "X-User-ID:$(headers.x_authenticated_userid)"
              - "X-User-Role:$(headers.x_authenticated_scope)"
              - "X-User-Name:$(headers.x_authenticated_username)"
              - "X-User-Email:$(headers.x_authenticated_email)"

  # ================================
  # API Routes - 直接访问后端服务，使用 JWT 认证
  # ================================

  # API 聚合路由 - 通过中台处理复杂业务逻辑
  - name: api-middleware-routes
    service: middleware-service
    paths:
      - /api/business/summary     # 聚合业务数据
      - /api/analytics/summary    # 聚合分析数据
      - /api/campus-auth         # 认证相关
    strip_path: false
    plugins:
      - name: jwt
        config:
          secret_is_base64: false
          claims_to_verify:
            - exp
          key_claim_name: userId
          maximum_expiration: 86400
      - name: request-transformer
        config:
          add:
            headers:
              - "X-User-ID:$(jwt.userId)"
              - "X-User-Role:$(jwt.role)"
              - "X-User-Name:$(jwt.name)"
              - "X-User-Email:$(jwt.email)"

  # API 业务服务路由 - 直接访问 business-service
  - name: api-business-direct
    service: business-service-http
    paths:
      - /api/business/courses      # 课程管理
      - /api/business/enrollments  # 选课管理
      - /api/business/grades       # 成绩管理
      - /api/business/records      # 业务记录
      - /api/business/books        # 图书管理
      - /api/business/stats        # 业务统计
    strip_path: true
    plugins:
      - name: jwt
        config:
          secret_is_base64: false
          claims_to_verify:
            - exp
          key_claim_name: userId
          maximum_expiration: 86400
      - name: request-transformer
        config:
          add:
            headers:
              - "X-User-ID:$(jwt.userId)"
              - "X-User-Role:$(jwt.role)"
              - "X-User-Name:$(jwt.name)"
              - "X-User-Email:$(jwt.email)"
          remove:
            headers:
              - "authorization"

  # API gRPC 业务服务路由 - gRPC Gateway
  - name: api-business-grpc
    service: business-service-grpc
    paths:
      - /grpc/business
      - /grpc/campus
    strip_path: true
    plugins:
      - name: grpc-gateway
        config:
          proto: /etc/kong/protos/business.proto
      - name: jwt
        config:
          secret_is_base64: false
          claims_to_verify:
            - exp
          key_claim_name: userId
          maximum_expiration: 86400
      - name: request-transformer
        config:
          add:
            headers:
              - "X-User-ID:$(jwt.userId)"
              - "X-User-Role:$(jwt.role)"
              - "X-User-Name:$(jwt.name)"
              - "X-User-Email:$(jwt.email)"

  # API 分析服务路由 - 直接访问 analytics-service
  - name: api-analytics-direct
    service: analytics-service
    paths:
      - /api/analytics/dashboard   # 分析仪表板
      - /api/analytics/query       # 数据查询
      - /api/analytics/export      # 数据导出
      - /api/analytics/report      # 分析报告
      - /api/data/events          # 事件数据
    strip_path: true
    plugins:
      - name: jwt
        config:
          secret_is_base64: false
          claims_to_verify:
            - exp
          key_claim_name: userId
          maximum_expiration: 86400
      - name: request-transformer
        config:
          add:
            headers:
              - "X-User-ID:$(jwt.userId)"
              - "X-User-Role:$(jwt.role)"
              - "X-User-Name:$(jwt.name)"
              - "X-User-Email:$(jwt.email)"
          remove:
            headers:
              - "authorization"

  # ================================
  # Health Check Routes - 无需认证
  # ================================
  - name: health-middleware
    service: middleware-service
    paths:
      - /health/middleware
    strip_path: true

  # business-service 只提供 gRPC，健康检查通过 middleware-service 代理

  - name: health-analytics
    service: analytics-service
    paths:
      - /health/analytics
    strip_path: true

  # ================================
  # Development Routes - 开发环境路由
  # ================================
  - name: dev-api-all
    service: middleware-service
    paths:
      - /dev/api
    strip_path: false
    plugins:
      - name: key-auth
        config:
          key_names:
            - apikey
      - name: request-transformer
        config:
          add:
            headers:
              - "X-Dev-Mode:true"

# JWT Consumers
consumers:
  - username: campus-jwt-consumer
    jwt_secrets:
      - key: campus-jwt-secret
        secret: your-jwt-secret-key

  - username: dev-consumer
    keyauth_credentials:
      - key: dev-api-key

# Global Plugins
plugins:
  # Request tracking
  - name: request-id
    config:
      header_name: X-Request-ID
      echo_downstream: true

  - name: correlation-id
    config:
      header_name: X-Correlation-ID
      echo_downstream: true

  # Rate limiting
  - name: rate-limiting
    config:
      minute: 200
      hour: 2000
      day: 10000
      policy: local
      hide_client_headers: false

  # Monitoring
  - name: prometheus
    config:
      per_consumer: true

  # Custom authentication and routing logic
  - name: lua
    config:
      access_by_lua_block: |
        -- Campus API Gateway Authentication & Routing Logic
        local jwt = require "resty.jwt"
        local cjson = require "cjson"
        
        local function log_request()
          local method = kong.request.get_method()
          local path = kong.request.get_path()
          local user_id = kong.request.get_header("X-User-ID") or "anonymous"
          kong.log.info("API Request: ", method, " ", path, " User: ", user_id)
        end
        
        local function parse_jwt_user_info()
          local auth_header = kong.request.get_header("authorization")
          if not auth_header then
            return nil
          end
          
          local token = string.match(auth_header, "Bearer%s+(.+)")
          if not token then
            return nil
          end
          
          local jwt_obj = jwt:verify("your-jwt-secret-key", token)
          if jwt_obj and jwt_obj.valid then
            return jwt_obj.payload
          end
          
          return nil
        end
        
        local function parse_session_user_info()
          return {
            userId = kong.request.get_header("x-authenticated-userid"),
            role = kong.request.get_header("x-authenticated-scope"),
            name = kong.request.get_header("x-authenticated-username"),
            email = kong.request.get_header("x-authenticated-email")
          }
        end
        
        local function inject_user_context(user_info)
          if user_info and user_info.userId then
            kong.service.request.set_header("X-User-ID", user_info.userId)
            kong.service.request.set_header("X-User-Role", user_info.role or "")
            kong.service.request.set_header("X-User-Name", user_info.name or "")
            kong.service.request.set_header("X-User-Email", user_info.email or "")
            kong.service.request.set_header("X-Kong-Authenticated", "true")
          end
        end
        
        -- Main routing logic
        local path = kong.request.get_path()
        local user_info = nil
        
        -- Skip auth for health checks and dev routes with API key
        if string.match(path, "^/health/") then
          log_request()
          return
        end
        
        if string.match(path, "^/dev/") then
          local api_key = kong.request.get_header("apikey")
          if api_key == "dev-api-key" then
            kong.service.request.set_header("X-Dev-Mode", "true")
            log_request()
            return
          end
        end
        
        -- Determine auth method and extract user info
        if string.match(path, "^/ui/") then
          -- UI routes use session/cookie auth
          user_info = parse_session_user_info()
        elseif string.match(path, "^/api/") or string.match(path, "^/grpc/") then
          -- API routes use JWT auth
          user_info = parse_jwt_user_info()
        end
        
        -- Inject user context for backend services
        inject_user_context(user_info)
        
        -- Log the request
        log_request()
      
      header_filter_by_lua_block: |
        -- Add API response headers
        kong.response.set_header("X-Kong-Gateway", "campus-api-gateway")
        kong.response.set_header("X-API-Version", "v1.0")
        
        -- Security headers
        kong.response.set_header("X-Content-Type-Options", "nosniff")
        kong.response.set_header("X-Frame-Options", "DENY")
        kong.response.set_header("X-XSS-Protection", "1; mode=block")